1. So in file Angular.json we added bootstrap and check all csss files imported in head element on inspection.
2. iNDEX.HTML IS SERVED by server. which includes <app-root. component and that how our application starts.
3. @Component is called decorator. 
4. There will scripts imported if you inspect your page, those scripts are substitied by gn-serve and includes our code as well. 
Our code gets triggered from main.ts onwards. this bootstraps our main app.module.ts which in turn provides way for our components to be executed.
In there is a list of bootstrap components which are then to be analyzed while initial serving of index.html.

Thhus angular gets starts main.ts which bootstarps our application (which is a module: module.ts, and is passed as argument) and withing this module
 we bootstrap our component that angular should know. within  this main component, we have our main selector which is used in index.html. 


Components are main building blocks.   With in each component we can nest another component (in html) file, hence whole thing is heirarchical. decorator @Component 
is used to provide meta information about componet/class to angualr on how to use it. Each component and all its files declared in this metadata are bundled together by webpack and then servered together.


App.module or similar files bundles bundles of components into packages. 
So after defining component, we need to declare it in module file, so that in can be included in package. 
Each time you use a selector of a component a corresponding instance is used. 


So to create new component always use ng generate component ad-component command. 
It sets up all the required files along with setup code. This is really awesome. And it adds this new component to modules as well.  We can define template i.e. CSS or HTML in decorator itself, as strings or ``. 
Don't use it though. If you use it, change templateUrl and StyleUrl to template and style. 
Templates has to be present though, style can be missing. 

Selectors can be replaced with attributes or CSS type class reference, where while using you treat them as CSS classes, bad practice though. So stick with selectors. 

1. MileStone 1: Create a small components, one Warning or Error Alert, This will eventually convert into toasters.
Problem: Don't know what to do with enum file where type of Alert is defined. How to import and declare it.  Also input passing to component was not working precisely.


DataBinding == Communication 

TS ------------> html
{{data}}, [data] = ""          ----------(1), 


TS <------------ HTML
Event Binding (event)="expression"   ----------(2), 


Two way Binding
TS <------------> HTML
[(ngModel)] = "data"           ----------(3), 


In (1) this should evaluate to a string, else won't work. It is called string interpolation. , i.e. {{ }}
Similarly, [data] = "someProperty", this is called property Binding. 

So for property binding or event biniding in (2), always read mozilla's developer guide after googling HTML_property events or perperties. 
The data emitted by any DOM element can be passed to process to your function. This data is passes with $event variable, its a reserved variable. 
so (click)="onClick($event)" includes all the data emitted by this click event. $ means reserved. 


What are directives?
Directives are instructions in the DOM! like selector of our components. Decorator used is @Decorator. ngIf is a directive too! 
<p *ngIf="something">...</p> ---- The * is required because ngIf is a structural directive, which means it will change the structure of DOM.
 Angular will create a hook as comments in the section, where it will insert the element on expression `something` going true. 
 This element is added or removed, it is not hidden or anything. 
 